Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactNative = require('react-native');

var _config = require('../config');

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var headers = {
  'Accept': 'application/json',
  'Content-Type': 'application/json'
};

var resolver = function resolver() {
  return _reactNative.AsyncStorage.getItem('userToken', function (err, result) {

    if (result) {
      result = JSON.parse(result);
    }
  });
};

var api = function () {
  function api() {
    _classCallCheck(this, api);
  }

  _createClass(api, null, [{
    key: 'post',
    value: function post(endpoint, data) {
      console.log(_config2.default.base_api + endpoint);
      console.log(data);
      return new Promise(function (resolve, reject) {
        resolver().then(function () {
          fetch(_config2.default.base_api + endpoint, {
            method: 'POST',
            headers: headers,
            body: JSON.stringify(data)
          }).then(function (response) {
            console.log(response);

            if (response.status === 200) {
              resolve(response.json());
            } else {
              if (response.status === 204) {
                resolve();
              } else {
                reject({ "err": "401 found" });
              }
            }
          }).catch(function (error) {
            return error;
          });
        }).catch(function (err) {
          return err;
        });
      });
    }
  }, {
    key: 'put',
    value: function put(endpoint, data) {
      console.log(_config2.default.base_api + endpoint);
      console.log(data);
      return new Promise(function (resolve, reject) {
        resolver().then(function () {
          fetch(_config2.default.base_api + endpoint, {
            method: 'PUT',
            headers: headers,
            body: JSON.stringify(data)
          }).then(function (response) {
            console.log(response);
            if (response.status === 200) {
              resolve(response.json());
            } else {
              if (response.status === 204) {
                resolve();
              } else {
                reject({ "err": "401 found" });
              }
            }
          }).catch(function (error) {
            return error;
          });
        }).catch(function (err) {
          return err;
        });
      });
    }
  }, {
    key: 'get',
    value: function get(endpoint) {
      return new Promise(function (resolve, reject) {
        console.log(_config2.default.base_api + endpoint);
        resolver().then(function () {
          fetch(_config2.default.base_api + endpoint, {
            method: 'GET',
            headers: headers
          }).then(function (response) {
            if (response.status === 200) {
              resolve(response.json());
            } else {
              if (response.status === 204) {
                resolve();
              } else {
                reject({ "err": "401 found" });
              }
            }
          }).catch(function (error) {
            return error;
          });
        }).catch(function (error) {
          return error;
        });
      });
    }
  }]);

  return api;
}();

exports.default = api;