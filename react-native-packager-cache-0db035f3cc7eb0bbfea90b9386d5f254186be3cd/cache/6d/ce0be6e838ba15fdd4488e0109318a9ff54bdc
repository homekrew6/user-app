Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _index = require('../../../api/index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var serviceApi = function () {
	function serviceApi() {
		_classCallCheck(this, serviceApi);
	}

	_createClass(serviceApi, null, [{
		key: 'getQuestionListByServiceId',
		value: function getQuestionListByServiceId(id) {
			return new Promise(function (resolve, reject) {
				var questionService = '{"include": [{"relation": "answers"}],"where": { 		"serviceId": ' + id + '	} }';
				console.log(questionService);
				var url = "Questions?filter=" + questionService;
				_index2.default.get(url).then(function (responseJson) {
					resolve(responseJson);
				}).catch(function (err) {
					console.log(err);
					reject(err);
				});
			});
		}
	}]);

	return serviceApi;
}();

exports.default = serviceApi;