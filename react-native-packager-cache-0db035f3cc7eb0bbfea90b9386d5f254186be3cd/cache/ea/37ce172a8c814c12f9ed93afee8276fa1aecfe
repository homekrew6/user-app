Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index = require('./../../react-transform-hmr/lib/index.js');

var _index2 = _interopRequireDefault(_index);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class,
    _temp,
    _jsxFileName = '/home/nits-58/Desktop/project/anup/loopback/user-app/node_modules/react-native-loading-spinner-overlay/src/index.js';

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactNative = require('react-native');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  Spinner: {
    displayName: 'Spinner'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: '/home/nits-58/Desktop/project/anup/loopback/user-app/node_modules/react-native-loading-spinner-overlay/src/index.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: 'transparent',
    position: 'absolute',
    top: 0,
    bottom: 0,
    left: 0,
    right: 0
  },
  background: {
    position: 'absolute',
    top: 0,
    bottom: 0,
    left: 0,
    right: 0,
    justifyContent: 'center',
    alignItems: 'center'
  },
  textContainer: {
    flex: 1,
    top: 0,
    bottom: 0,
    left: 0,
    right: 0,
    justifyContent: 'center',
    alignItems: 'center',
    position: 'absolute'
  },
  textContent: {
    top: 80,
    height: 50,
    fontSize: 20,
    fontWeight: 'bold'
  }
});

var ANIMATION = ['none', 'slide', 'fade'];
var SIZES = ['small', 'normal', 'large'];

var Spinner = _wrapComponent('Spinner')((_temp = _class = function (_React$Component) {
  _inherits(Spinner, _React$Component);

  function Spinner(props) {
    _classCallCheck(this, Spinner);

    var _this = _possibleConstructorReturn(this, (Spinner.__proto__ || Object.getPrototypeOf(Spinner)).call(this, props));

    _this.state = { visible: _this.props.visible, textContent: _this.props.textContent };
    return _this;
  }

  _createClass(Spinner, [{
    key: 'close',
    value: function close() {
      this.setState({ visible: false });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var visible = nextProps.visible,
          textContent = nextProps.textContent;

      this.setState({ visible: visible, textContent: textContent });
    }
  }, {
    key: '_handleOnRequestClose',
    value: function _handleOnRequestClose() {
      if (this.props.cancelable) {
        this.close();
      }
    }
  }, {
    key: '_renderDefaultContent',
    value: function _renderDefaultContent() {
      return _react3.default.createElement(
        _reactNative.View,
        { style: styles.background, __source: {
            fileName: _jsxFileName,
            lineNumber: 112
          }
        },
        _react3.default.createElement(_reactNative.ActivityIndicator, {
          color: this.props.color,
          size: this.props.size,
          style: { flex: 1 },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 113
          }
        }),
        _react3.default.createElement(
          _reactNative.View,
          { style: styles.textContainer, __source: {
              fileName: _jsxFileName,
              lineNumber: 118
            }
          },
          _react3.default.createElement(
            _reactNative.Text,
            { style: [styles.textContent, this.props.textStyle], __source: {
                fileName: _jsxFileName,
                lineNumber: 119
              }
            },
            this.state.textContent
          )
        )
      );
    }
  }, {
    key: '_renderSpinner',
    value: function _renderSpinner() {
      var _this2 = this;

      var visible = this.state.visible;


      if (!visible) return null;

      var spinner = _react3.default.createElement(
        _reactNative.View,
        { style: [styles.container, { backgroundColor: this.props.overlayColor }], key: 'spinner_' + Date.now(), __source: {
            fileName: _jsxFileName,
            lineNumber: 131
          }
        },
        this.props.children ? this.props.children : this._renderDefaultContent()
      );

      return _react3.default.createElement(
        _reactNative.Modal,
        {
          animationType: this.props.animation,
          onRequestClose: function onRequestClose() {
            return _this2._handleOnRequestClose();
          },
          supportedOrientations: ['landscape', 'portrait'],
          transparent: true,
          visible: visible, __source: {
            fileName: _jsxFileName,
            lineNumber: 140
          }
        },
        spinner
      );
    }
  }, {
    key: 'render',
    value: function render() {
      return this._renderSpinner();
    }
  }]);

  return Spinner;
}(_react3.default.Component), _class.propTypes = {
  visible: _propTypes2.default.bool,
  cancelable: _propTypes2.default.bool,
  textContent: _propTypes2.default.string,
  animation: _propTypes2.default.oneOf(ANIMATION),
  color: _propTypes2.default.string,
  size: _propTypes2.default.oneOf(SIZES),
  overlayColor: _propTypes2.default.string
}, _class.defaultProps = {
  visible: false,
  cancelable: false,
  textContent: '',
  animation: 'none',
  color: 'white',
  size: 'large',
  overlayColor: 'rgba(0, 0, 0, 0.25)'
}, _temp));

exports.default = Spinner;